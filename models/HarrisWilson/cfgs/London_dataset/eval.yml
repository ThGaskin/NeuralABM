# Plot the marginals in a single facet_grid plot
marginals:
  based_on:
    - .creator.multiverse
    - .plot.facet_grid.density
    - .cycler_yellow_green
  select_and_combine:
    fields:
      parameters: parameters
      loss: loss
  transform:

    # Divide the loss by the median value: this is necessary to prevent numerical underflow
    # arising from very small values of J
    - .median: [ !dag_tag loss , [ 'epoch', 'seed', 'metric' ] ]
    - div: [ !dag_tag loss, !dag_prev ]
    - mul: [ !dag_prev , -1 ]
    - np.exp: [ !dag_prev ]

    # Flatten the prob and parameter samples into a single dimension
    # Reassign metric coordinates for easier selection
    - flatten_dims: [!dag_prev ]
      kwargs:
        dims: {sample: [epoch, seed]}
    - .assign_coords: [ !dag_prev , { metric: [ 'temporal', 'spatial' ] } ]
      tag: prob
    - flatten_dims: [!dag_tag parameters ]
      kwargs:
        dims: {sample: [epoch, seed]}
    - .assign_coords: [ !dag_prev , { metric: [ 'temporal', 'spatial' ] } ]
      tag: params

    # Broadcast the parameter and probabilities into a common dataset
    - broadcast: [!dag_tag params, !dag_tag prob]

    # Get the marginals along the parameters
    - marginal_from_ds: [!dag_prev ]
      kwargs:
        x: x
        y: loss
        exclude_dim: [sigma, metric, parameter]
      tag: data
  x: x
  y: y
  col: parameter
  hue: metric
  row: sigma
  sharex: False
  sharey: False
  style:
    figure.figsize: [!dag_result full_width, !dag_result full_width]

# Plot each individual marginal, smoothed, with the MCMC comparison (PNAS publication plots)
marginals/low_noise/alpha:
  based_on:
    - .creator.multiverse
    - .plot.facet_grid.density
    - .cycler_yellow_green
  dag_options:
    meta_operations:
      load_csv:
        - import_and_call: [ pandas, read_csv, !arg 0 ]
          kwargs: {index_col: 0}
        - getitem: [ !dag_prev , !arg 1 ]
    define:
      parameter: 'alpha'
      mcmc_path: 'data/HarrisWilson/London_data/MCMC_data/low_noise_alpha.csv'
  select_and_combine:
    fields:
      parameters:
        path: parameters
        transform:
          - .sel: [!dag_prev , {parameter: !dag_tag parameter}]
      loss: loss
    subspace:
      sigma: {idx: 1}
  transform:
    - xr.DataArray:
        data: [[1000, 1000], [1000, 1000]]
        dims: ['metric', 'idx']
        coords: {metric: ['temporal', 'spatial']}
      tag: bins

    # Divide the loss by the median value: this is necessary to prevent numerical underflow
    # arising from very small values of J
    - .median: [ !dag_tag loss ]
    - div: [ !dag_tag loss, !dag_prev ]
    - mul: [ !dag_prev , -1 ]
    - np.exp: [ !dag_prev ]

    # Flatten the prob and parameter samples into a single dimension
    # Reassign metric coordinates for easier selection
    - flatten_dims: [!dag_prev ]
      kwargs:
        dims: {sample: [epoch, seed, sigma]}
    - .assign_coords: [ !dag_prev , { metric: [ 'temporal', 'spatial' ] } ]
      tag: prob
    - flatten_dims: [!dag_tag parameters ]
      kwargs:
        dims: {sample: [epoch, seed, sigma]}
    - .assign_coords: [ !dag_prev , { metric: [ 'temporal', 'spatial' ] } ]
      tag: params

    # Broadcast the parameter and probabilities into a common dataset
    - broadcast: [!dag_tag params, !dag_tag prob]

    # Get the marginals along the parameters
    - marginal_from_ds: [!dag_prev , !dag_tag bins ]
      kwargs:
        x: x
        y: loss
        exclude_dim: [metric]
      tag: data

    # Load the MCMC data for comparison, if available
    - load_csv: [!dag_tag mcmc_path, !dag_tag parameter]
      allow_failure: silent
      tag: mcmc_data

    # Format the parameter name as a latex string
    - .format: ['$\{:}$', !dag_tag parameter]
      tag: x_label
  x: x
  y: y
  hue: metric
  style:
    figure.figsize: [ !dag_result third_width, !dag_result fifth_width ]
  smooth_kwargs:
    enabled: True
    smoothing: 10
  helpers:
    # Draw the MCMC
    call:
      functions:
        - function: sns.kdeplot
          data: !dag_result mcmc_data
          color: !dag_result c_lightbrown
          label: MCMC
    set_legend:
      use_legend: True
      gather_from_fig: True
    set_labels:
      x: !dag_result x_label
      y: ' '

marginals/low_noise/beta:
  based_on: marginals/low_noise/alpha
  dag_options:
    define:
      parameter: 'beta'
      mcmc_path: 'data/HarrisWilson/London_data/MCMC_data/low_noise_beta.csv'

# No MCMC estimate exists for kappa
marginals/low_noise/kappa:
  based_on: marginals/low_noise/alpha
  dag_options:
    define:
      parameter: 'kappa'
  helpers:
    call: {functions: []}

marginals/high_noise/alpha:
  based_on: marginals/low_noise/alpha
  dag_options:
    define:
      mcmc_path: 'data/HarrisWilson/London_data/MCMC_data/high_noise_alpha.csv'
  select_and_combine:
    subspace:
      sigma: {idx: 2}

marginals/high_noise/beta:
  based_on: marginals/low_noise/beta
  dag_options:
    define:
      mcmc_path: 'data/HarrisWilson/London_data/MCMC_data/high_noise_beta.csv'
  select_and_combine:
    subspace:
      sigma: {idx: 2}

marginals/high_noise/kappa:
  based_on: marginals/low_noise/kappa
  select_and_combine:
    subspace:
      sigma: {idx: 2}

# Plot the predictions of the parameters, colour-coded by loss
predictions: !pspace
  based_on:
    - .creator.multiverse
    - .plot.facet_grid.scatter
  add_legend: False
  select_and_combine:
    fields:
      parameters:
        path: parameters
        transform: [.data]
      loss:
        path: loss
        transform: [.data]
    subspace:
      sigma: !sweep
        default: 0.14
        values: [0.014, 0.14]
  transform:
    - broadcast: [!dag_tag parameters, !dag_tag loss]
      kwargs:
        exclude_dim: ['seed', 'metric', 'sigma']
    - flatten_dims: [!dag_prev ]
      kwargs:
        dims: {'iteration': ['epoch', 'seed']}
    - .assign_coords: [!dag_prev , {metric: ['temporal', 'spatial']}]
      tag: data
  col: metric
  row: parameter
  x: iteration
  y: x
  hue: loss
  s: 1
  sharey: False # Seems to have no effect?
  norm:
    name: LogNorm
  cmap:
    continuous: true
    from_values:
      0: !dag_result c_darkblue
      1: !dag_result c_yellow
  helpers:
    set_limits:
      x: [0, max]
      y: [0, max] # Why is this necessary?

# Plot the probability landscape
probability_landscape: !pspace
  based_on: predictions
  select_and_combine:
    fields:
      loss:
        path: loss
        transform:
          - log10: [!dag_prev ]
          - mul: [!dag_prev , -1]
  x: x
  y: loss
  hue: loss
  sharex: False
  s: 1
  helpers:
    set_limits:
      x: [min, max]
      y: [min, max]

# Plot the intial value distribution on the parameters
initial_values:
  based_on:
    - .creator.multiverse
    - .plot.multiplot
  select_and_combine:
    fields:
      parameters:
        path: parameters
        transform:
          - .isel: [!dag_prev , {epoch: 0}]
  transform:
    - flatten_dims: [!dag_tag parameters]
      kwargs:
        dims: {'sample': ['seed', 'sigma', 'metric']}
      tag: parameters_flattened
    - .isel: [!dag_tag parameters_flattened, {parameter: 0}]
      tag: a
    - .isel: [!dag_tag parameters_flattened, {parameter: 1}]
      tag: b
    - .isel: [!dag_tag parameters_flattened, {parameter: 2}]
      tag: k
  to_plot:
    [0, 0]:
      - function: sns.histplot
        data: !dag_result a
    [1, 0]:
      - function: sns.histplot
        data: !dag_result b
    [2, 0]:
      - function: sns.histplot
        data: !dag_result k
  color: !dag_result c_darkblue
  linewidth: 0.5
  bins: 20
  helpers:
    axis_specific:
      0:
        axis: [0, 0]
        set_labels:
          x: $\alpha$
      1:
        axis: [ 1, 0 ]
        set_labels:
          x: $\beta$
      2:
        axis: [ 2, 0 ]
        set_labels:
          x: $\kappa$
    setup_figure:
      nrows: 1
      ncols: 3
    set_labels:
      y: ' '
  compute_only: []
  style:
    figure.figsize: [!dag_result full_width, !dag_result quarter_width]
