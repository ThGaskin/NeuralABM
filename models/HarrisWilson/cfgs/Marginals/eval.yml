---
# ======================================================================================================================
#  ╦  ╦╔═╗╦═╗╦╔═╗╔╗ ╦  ╔═╗╔═╗
#  ╚╗╔╝╠═╣╠╦╝║╠═╣╠╩╗║  ║╣ ╚═╗
#   ╚╝ ╩ ╩╩╚═╩╩ ╩╚═╝╩═╝╚═╝╚═╝
# ======================================================================================================================

_:
  colors: &colors
    yellow:         &yellow       '#F5DDA9'
    darkblue:       &darkblue     '#2F7194'
    red:            &red          '#ec7070'
    skyblue:        &skyblue      '#97c3d0'
    green:          &green        '#48675A'
    lightbrown:     &lightbrown   '#C6BFA2'
    orange:         &orange       '#EC9F7E'
    lightgreen:     &lightgreen   '#AFD8BC'
    grey:           &grey         '#3D4244'

  # Page widths in inches for latex documents: ensures easy integration into latex documents
  page_widths:
    half_width:    &half_width     !expr 7.00787402 / 2
    third_width:   &third_width    !expr 7.00787402 / 3
    fifth_width:   &fifth_width    !expr 7.00787402 / 5

  # True parameters
  true_parameters:
    alpha:        &alpha          1.2
    beta:         &beta           4
    kappa:        &kappa          2

.defaults:
  file_ext: pdf
  style:
    figure.figsize: [ *half_width, *fifth_width ]
    axes.prop_cycle: !format
      fstr: "cycler('color', ['{colors[darkblue]:}',
                              '{colors[green]:}',
                              '{colors[yellow]:}',
                              '{colors[skyblue]:}',
                              '{colors[lightbrown]:}',
                              '{colors[red]:}'
                              ])"
      colors: *colors

# ======================================================================================================================
#  ╔╦╗╔═╗╦═╗╔═╗╦╔╗╔╔═╗╦    ╔═╗╦  ╔═╗╦ ╦╔═╗
#  ║║║╠═╣╠╦╝║ ╦║║║║╠═╣║    ╠═╣║  ╠═╝╠═╣╠═╣
#  ╩ ╩╩ ╩╩╚═╚═╝╩╝╚╝╩ ╩╩═╝  ╩ ╩╩═╝╩  ╩ ╩╩ ╩
# ======================================================================================================================

marginal_alpha:
  based_on:
    - marginals
    - .defaults
  select_and_combine:
    fields:
      param1: alpha

  # Calculate marginals along the noise dimension
  transform:
    - xr.Dataset:
      - x: !dag_tag param1
        p: !dag_tag loss
    - .assign_coords: [ !dag_prev , { sigma: [ 0, 0.25, 0.5, 1, 1.5 ] } ]
    - operation: compute_marginals
      args: [ !dag_prev ]
      kwargs:
        exclude_dim:
          - sigma
        bins: 1000
        x: x
        p: p
      tag: data

  x: x
  y: p
  hue: sigma

  smooth_kwargs:
    enabled: True
    sigma: 0.5

  helpers:
    set_legend:
      use_legend: True
      bbox_to_anchor: [ 0.0, 0.3, 1, 1 ]
      ncol: 6
      handlelength: 1
      labels: [$\sigma=0$, 0.25, 0.5, 1, 1.5]
      columnspacing: 1
    set_labels:
      x: '$\alpha$'
      y: ' '
    set_hv_lines:
      vlines:
        - pos: *alpha
          color: *red
          zorder: 5
          linestyle: dotted
          linewidth: 1
    set_limits:
      x: [0.8, 1.5]

# ======================================================================================================================
#  ╔╦╗╔═╗╦═╗╔═╗╦╔╗╔╔═╗╦    ╔╗ ╔═╗╔╦╗╔═╗
#  ║║║╠═╣╠╦╝║ ╦║║║║╠═╣║    ╠╩╗║╣  ║ ╠═╣
#  ╩ ╩╩ ╩╩╚═╚═╝╩╝╚╝╩ ╩╩═╝  ╚═╝╚═╝ ╩ ╩ ╩
# ======================================================================================================================

marginal_beta:
  based_on: marginal_alpha
  select_and_combine:
    fields:
      param1: beta
  style:
    figure.figsize: [ *third_width, *fifth_width ]
  helpers:
    set_legend:
      use_legend: False
    set_labels:
      x: '$\beta$'
      y: ' '
    set_hv_lines:
      vlines:
        - pos: *beta
          color: *red
          zorder: 5
          linestyle: dotted
          linewidth: 1
    set_limits:
      x: [ ~, 5]

# ======================================================================================================================
#  ╔╦╗╔═╗╦═╗╔═╗╦╔╗╔╔═╗╦    ╦╔═╔═╗╔═╗╔═╗╔═╗
#  ║║║╠═╣╠╦╝║ ╦║║║║╠═╣║    ╠╩╗╠═╣╠═╝╠═╝╠═╣
#  ╩ ╩╩ ╩╩╚═╚═╝╩╝╚╝╩ ╩╩═╝  ╩ ╩╩ ╩╩  ╩  ╩ ╩
# ======================================================================================================================

marginal_kappa:
  based_on: marginal_alpha
  select_and_combine:
    fields:
      param1: kappa
  style:
    figure.figsize: [ *third_width, *fifth_width ]
  helpers:
    set_legend:
      use_legend: False
    set_labels:
      x: '$\kappa$'
      y: ' '
    set_hv_lines:
      vlines:
        - pos: *kappa
          color: *red
          zorder: 5
          linestyle: dotted
          linewidth: 1
    set_limits:
      x: [1.75, 2.25]

# ======================================================================================================================
#  ╔╦╗╔═╗╦═╗╔═╗╦╔╗╔╔═╗╦    ╔═╗╦╔═╗╔╦╗╔═╗
#  ║║║╠═╣╠╦╝║ ╦║║║║╠═╣║    ╚═╗║║ ╦║║║╠═╣
#  ╩ ╩╩ ╩╩╚═╚═╝╩╝╚╝╩ ╩╩═╝  ╚═╝╩╚═╝╩ ╩╩ ╩
# ======================================================================================================================

marginal_sigma:
  based_on: marginal_kappa
  select_and_combine:
    fields:
      param1: sigma
  helpers:
    set_limits:
      x: [0, 0.1]
    set_labels:
      x: '$\sigma$'
      y: ' '

# ======================================================================================================================
#  ╔═╗╔═╗╔═╗╦╔═  ╦ ╦╦╔╦╗╔╦╗╦ ╦╔═╗
#  ╠═╝║╣ ╠═╣╠╩╗  ║║║║ ║║ ║ ╠═╣╚═╗
#  ╩  ╚═╝╩ ╩╩ ╩  ╚╩╝╩═╩╝ ╩ ╩ ╩╚═╝
# ======================================================================================================================

peak_widths:
  based_on:
    - .creator.multiverse
    - .plot.facet_grid.errorbands
    - .defaults

  # Collect the data
  select_and_combine:
    fields:
      alpha: alpha
      beta: beta
      kappa: kappa
      loss:
        path: loss
        transform:
          - np.maximum: [ !dag_prev , 1e-15 ]
          - mul: [ !dag_prev , -1 ]
          - np.exp: [ !dag_prev ]

  # For each parameter, calculate the marginals, and from that the average peak width.
  transform:
    # alpha
    - xr.Dataset:
      - x: !dag_tag alpha
        p: !dag_tag loss
    - .assign_coords: [!dag_prev , {sigma: [ 0, 0.25, 0.5, 1, 1.5 ]}]
    - operation: compute_marginals
      args: [ !dag_prev ]
      kwargs:
        exclude_dim:
          - sigma
        bins: 1000
        x: x
        p: p
    - getitem: [!dag_prev , 'p']
    - operation: average_peak_widths
      args: [!dag_prev ]
      kwargs:
        exclude_dim:
          - sigma
        prominence: 0.5
        width: [~, ~]
        pad: False
      tag: peaks_alpha

    # beta
    - xr.Dataset:
      - x: !dag_tag beta
        p: !dag_tag loss
    - .assign_coords: [!dag_prev , {sigma: [ 0, 0.25, 0.5, 1, 1.5 ]}]
    - operation: compute_marginals
      args: [ !dag_prev ]
      kwargs:
        exclude_dim:
          - sigma
        bins: 1000
        x: x
        p: p
    - getitem: [!dag_prev , 'p']
    - operation: average_peak_widths
      args: [!dag_prev ]
      kwargs:
        exclude_dim:
          - sigma
        prominence: 0.5
        width: [~, ~]
        pad: True
      tag: peaks_beta

    # kappa
    - xr.Dataset:
      - x: !dag_tag kappa
        p: !dag_tag loss
    - .assign_coords: [!dag_prev , {sigma: [ 0, 0.25, 0.5, 1, 1.5 ]}]
    - operation: compute_marginals
      args: [ !dag_prev ]
      kwargs:
        exclude_dim:
          - sigma
        bins: 1000
        x: x
        p: p
    - getitem: [!dag_prev , 'p']
    - operation: average_peak_widths
      args: [!dag_prev ]
      kwargs:
        exclude_dim:
          - sigma
        prominence: 1
        distance: 8
        height: 10
        width: [~, ~]
        pad: False
      tag: peaks_kappa

    # Combine
    - concat_along: [ [ !dag_tag peaks_beta, !dag_tag peaks_alpha, !dag_tag peaks_kappa ], 'parameter', [ '$\hat{\beta}$', '$\hat{\alpha}$', '$\hat{\kappa}$' ]]
      tag: data

  x: sigma
  y: mean
  yerr: std
  hue: parameter
  ms: 0
  helpers:
    set_labels:
      x: Training data noise $\sigma$
      y: ' '
    set_legend:
      title: ''
  style:
    axes.prop_cycle: !format
      fstr: "cycler('color', ['{colors[green]:}',
                              '{colors[darkblue]:}',
                              '{colors[red]:}',
                              '{colors[skyblue]:}'])"
      colors: *colors
