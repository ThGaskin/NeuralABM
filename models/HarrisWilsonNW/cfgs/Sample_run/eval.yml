_:
  colors: &colors
    yellow:             &yellow           '#F5DDA9'
    darkblue:           &darkblue         '#2F7194'
    red:                &red              '#ec7070'
    skyblue:            &skyblue          '#97c3d0'
    green:              &green            '#48675A'
    lightbrown:         &lightbrown       '#C6BFA2'
    orange:             &orange           '#EC9F7E'
    lightgreen:         &lightgreen       '#AFD8BC'
    grey:               &grey             '#3D4244'
    lightgrey:          &lightgrey        '#D6D6D6'

  # Page widths in inches for latex documents: ensures easy integration into latex documents
  page_widths:
    full_width:         &full_width       7.00787402
    half_width:         &half_width       !expr 7.00787402 / 2
    third_width:        &third_width      !expr 7.00787402 / 3
    quarter_width:      &quarter_width    !expr 7.00787402 / 4
    fifth_width:        &fifth_width      !expr 7.00787402 / 5

training_data:
  based_on: time_series
  select:
    data:
      path: training_data/training_data

origin_sizes:
  based_on: training_data
  select:
    data:
      path: training_data/origin_sizes

loss:
  based_on: loss

matrices/true_adjacency_matrix:
  based_on: adjacency_matrix

matrices/prediction:
  based_on: adjacency_matrix
  select:
    data:
      path: output_data/predictions
      transform:
        - .isel: [!dag_prev , {time: -1}]

matrices/error:
  based_on: error

matrices/ratio:
  based_on: .matrix
  select:
    true_data: true_network/_adjacency_matrix
    predicted_data:
      path: output_data/predictions
      transform:
        - .isel: [ !dag_prev , { time: -1 } ]
  transform:
    - div: [!dag_tag true_data, !dag_tag predicted_data]
      tag: data
  vmin: ~
  vmax: ~

# Plot the synthetic time series
time_series:
  based_on: time_series
  select:
    data:
      transform:
        - .isel: [ !dag_prev , { training_set: 0 } ]
          kwargs: { drop: true }

predicted_time_series:
  based_on: time_series
  select:
    data: output_data/predicted_time_series

degree:
  based_on: .multiplot_universe
  dag_options:
    meta_operations:
      hist:
        - np.linspace: [ 0, 5, 500 ]
        - NeuralABM.hist: [ !arg 0 ]
          kwargs: { bins: !dag_node -1, axis: !arg 1 }
  select:
    param_binned:
      path: output_data/predictions
      transform:
        - .sum: [!dag_prev , i ]
        - hist: [!dag_prev , 1]
    true_val:
      path: true_network/_adjacency_matrix
      transform:
        - .sum: [!dag_prev , i ]
        - .expand_dims: [!dag_prev , {time: [0]}]
        - hist: [!dag_prev , 1]
    loss:
      path: output_data/Loss
      transform:
        - .sel: [!dag_prev , {kind: Training loss}]
        - mul: [!dag_prev , -1]
        - np.exp: [!dag_prev ]

  transform:
    # Get the true value
    - NeuralABM.flatten_dims: [ !dag_tag true_val , { sample: [ time ] } ]
    - NeuralABM.normalise_degrees_to_edges: [ !dag_prev ]
    - .squeeze: [ !dag_prev ]
    - .to_dataset: [!dag_prev ]
      kwargs: {name: y}
      tag: true_param

    # Calculate mean, MLE, and error
    - NeuralABM.flatten_dims: [ !dag_tag param_binned , { sample: [ time ] } ]
    - NeuralABM.normalise_degrees_to_edges: [!dag_prev ]
      tag: samples
    - NeuralABM.flatten_dims: [ !dag_tag loss , { sample: [ epoch ] } ]
    - .expand_dims: [!dag_prev ]
      kwargs:
        bin_center: 1
        axis: -1
      tag: loss_flattened
    - .sum: [!dag_prev , 'sample']
    - div: [!dag_tag loss_flattened, !dag_prev ]
      tag: loss_normalised
    - .argmax: [!dag_tag loss ]
    - NeuralABM.marginal_of_density: [ !dag_tag samples ]
      kwargs:
        loss: !dag_tag loss_normalised
        error: Hellinger
        MLE_index: -1
      tag: data
    - div: [!dag_tag loss_flattened , 20 ]
      tag: losses
    - .data: [!dag_tag loss_flattened]
    - .to_dataset: [ !dag_tag samples ]
      kwargs: { name: y }
      tag: distributions
  to_plot:
#    - function: [ model_plots.HarrisWilson, plot_prob_density ]
#      args: [ !dag_result distributions ]
#      y: y
#      hue: sample
#      alpha: !dag_result losses
#      lw: !dag_result losses
#      suppress_labels: true
#      color: *darkblue
#      pass_helper: True
    - function: [ model_plots.HarrisWilson, plot_prob_density ]
      args: [ !dag_result data ]
      x: bin_center
      y: MLE
      yerr: yerr
      label: $\hat{P}(k)$
      pass_helper: true
      color: *grey
    - function: [model_plots.HarrisWilson, plot_prob_density]
      args: [ !dag_result true_param ]
      y: y
      linestyle: dotted
      color: *red
      label: $P(k)$
      pass_helper: True
  x: bin_center
  smooth_kwargs:
    enabled: True
    sigma: 2.8
  helpers:
    set_limits:
      x: [0, 5]
    set_labels:
      x: Weighted degree $k$
      y: $P(k)$

loss_mv:
  based_on: .line_multiverse
  expected_multiverse_ndim: [2]
  select_and_combine:
    fields:
      data: output_data/Loss
  col: kind
  hue: activation_func
  sharey: False
  helpers:
    set_scales:
      y: log