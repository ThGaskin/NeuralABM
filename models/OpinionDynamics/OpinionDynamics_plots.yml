loss:
  based_on: loss
  helpers:
    set_scales:
      y: log

true_graph:
  based_on: graph
  graph_creation:
    at_time_idx: -1
    edge_props: [ _edge_weights, _interaction ]
  graph_drawing:
    edges:
      edge_color:
        from_property: _interaction
      edge_cmap: !cmap
        from_values:
          0: red
          1: black
      width: 0.5

predicted_graph:
  based_on: graph
  select:
    graph_group: data/predicted_network
    opinions: data/opinion_data/predicted_opinions
  graph_creation:
    node_props: [opinions, _in_degree_weighted]
  graph_drawing:
    nodes:
      node_size:
        from_property: _in_degree_weighted
    edges:
      arrows: False
      width: 0.5

adjacency_matrix:
  based_on: adjacency_matrix

network_size:
  based_on: loss
  select:
    data: data/training_data/network_size
  helpers:
    set_labels:
      x: iteration

opinion_comparison:
  based_on: opinion_comparison

properties:
  based_on:
    - .creator.universe
    - .plot.multiplot
  select:
    true_degree:
      path: data/true_network/_degree
      transform:
        - .isel: [!dag_prev , {dim_name__0: 0}]
          kwargs:
            drop: True
        - .data: [!dag_prev ]
    predicted_out_degree:
      path: data/predicted_network/_out_degree
      transform:
        - .isel: [ !dag_prev , { time: -1 } ]
          kwargs:
            drop: True
        - .data: [ !dag_prev ]
    predicted_in_degree:
      path: data/predicted_network/_in_degree
      transform:
        - .isel: [ !dag_prev , { time: -1 } ]
          kwargs:
            drop: True
        - .data: [ !dag_prev ]
    true_clustering:
      path: data/true_network/_clustering
      transform:
        - .isel: [ !dag_prev , { dim_name__0: 0 } ]
          kwargs:
            drop: True
        - .data: [ !dag_prev ]
    predicted_clustering:
      path: data/predicted_network/_clustering
      transform:
        - .isel: [ !dag_prev , { time: -1 } ]
          kwargs:
            drop: True
        - .data: [ !dag_prev ]

  compute_only: []
  to_plot:
    [ 0, 0 ]:
      - function: sns.kdeplot
        args:
          - !dag_result true_degree
        label: $P(k)$
        clip: &clip [0, ~]
      - function: sns.kdeplot
        args:
          - !dag_result predicted_out_degree
        label: $\hat{P}_\mathrm{out}(k)$
        clip: *clip
      - function: sns.kdeplot
        args:
          - !dag_result predicted_in_degree
        label: $\hat{P}_\mathrm{in}(k)$
        clip: *clip
    [ 1, 0]:
    - function: sns.kdeplot
      args:
        - !dag_result true_clustering
      label: $P(c)$
      clip: *clip
    - function: sns.kdeplot
      args:
        - !dag_result predicted_clustering
      label: $\hat{P}(c)$
      clip: *clip
  helpers:
    setup_figure:
      ncols: 2
    axis_specific:
      degree:
        axis: [0, 0]
        set_legend:
          use_legend: True
          title: ~
          loc: 'best'
        set_title:
          title: Node degrees
      clustering:
        axis: [1, 0]
        set_legend:
          use_legend: True
          title: ~
          loc: 'best'
        set_title:
          title: Clustering coefficient
