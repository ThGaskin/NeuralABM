_:
  # True parameters
  true_parameters:
    p_infect:         &p_infect         0.2
    t_infect:         &t_infect         30
    sigma:            &sigma            0

# ======================================================================================================================
#  ╔═╗╦  ╔═╗╔╦╗╔═╗
#  ╠═╝║  ║ ║ ║ ╚═╗
#  ╩  ╩═╝╚═╝ ╩ ╚═╝
# ======================================================================================================================

# Animated state plot
state:
  based_on: state

  # Animation control
  enabled: True

  # Plot helpers
  helpers:
    setup_figure:
      figsize: [8, 8]
    set_title:
      title: 'Diffusive SIR model'
    set_limits:
      x: [0, 10]
      y: [0, 10]
    set_ticks:
      x: &labels
        major:
          locs: [0, 10]
          labels: ['-L', '+L']
      y:
        <<: *labels

# Plot the evolution of the training loss
loss:
  based_on: loss
  style:
    figure.figsize: [ !dag_result full_width, !dag_result third_width ]

# Plot the evolution of the parameters
predictions:
  based_on: predictions_uni

# Plot the marginals of all the parameters
marginals: !pspace
  based_on:
    - .marginal_uni
    - .plot.prob_density
  dag_options:
    define:
      parameter: !sweep
        default: 'p_infect'
        values: ['p_infect', 't_infectious', 'sigma']
      label: !coupled-sweep
        default: '$\beta$'
        values: ['$\beta$', '$\tau$', '$\sigma$']
        target_name: parameter
  transform:
    - get_marginal: [!dag_tag parameters, !dag_tag probabilities]
      kwargs:
        parameter: !dag_tag parameter
        bins: 100
        range: [[ 0, 1 ], [ 1, 30 ], [ 0, 1 ] ]
        normalize: True
      tag: data
  x: !dag_result parameter
  y: mean
  smooth_kwargs:
    enabled: True
    sigma: 2
  color: !dag_result c_darkblue
  helpers:
    set_labels:
      x: !dag_result label
      y: ' '
    set_hv_lines:
      vlines:
        - pos: !coupled-sweep
            default: *p_infect
            values: [*p_infect, *t_infect, *sigma]
            target_name: parameter
          color: !dag_result c_red
          zorder: 1
          linestyle: dotted
  style:
    figure.figsize: [!dag_result half_width, !dag_result half_width]

# Plot the densities obtained from the joint of the p_infect and t_infectious parameters
# Generate densities by drawing from the joint distribution of the parameters
densities_from_joint:
  based_on:
    - .creator.universe
    - .plot.facet_grid.errorbands
    - .joint_uni
  select:
    true_data:
      path: true_counts
      transform: [.data]
    cfg:
      path: ../../cfg
      transform:
        - getitem: [!dag_prev , 'SIR']
  transform:
    # Get the normalized joint distribution
    - get_joint: [!dag_tag parameters, !dag_tag probabilities]
      kwargs:
        bins: 100
        range: [[0, 1], [1, 30], [0, 0.5]]
        normalize: True
        differential: 1
      file_cache:
        read: True
        write: True
      tag: joint
    - getitem: [!dag_prev , 'mean']
    - .fillna: [!dag_prev , 0]
    - SIR_densities_from_joint: [!dag_prev ]
      kwargs:
        true_counts: !dag_tag true_data
        cfg: !dag_tag cfg
      file_cache:
        read: True
        write: True
      tag: data
  x: time
  y: mean
  yerr: std
  hue: type
  col: kind
  sharey: False
  add_legend: False
  figsize: [ !dag_result full_width, !dag_result third_width ]
  helpers:
    set_labels:
      y: ' '
    axis_specific:
      0:
        axis: [0, 0]
        set_legend:
          use_legend: True
          gather_from_fig: True
          custom_labels: [mean prediction, mode prediction, true data]
  style:
    axes.prop_cycle: !format
      fstr: "cycler('color', ['{colors[darkblue]:}', '{colors[orange]:}', '{colors[lightbrown]:}'])"
      colors:
        darkblue: '#2F7194'
        orange: '#EC9F7E'
        lightbrown: '#C6BFA2'
  file_ext: pdf
