# ======================================================================================================================
#  ╦  ╦╔═╗╦═╗╦╔═╗╔╗ ╦  ╔═╗╔═╗
#  ╚╗╔╝╠═╣╠╦╝║╠═╣╠╩╗║  ║╣ ╚═╗
#   ╚╝ ╩ ╩╩╚═╩╩ ╩╚═╝╩═╝╚═╝╚═╝
# ======================================================================================================================

.variables:
  colors: &colors
    yellow:         &yellow           '#F5DDA9'
    darkblue:       &darkblue         '#2F7194'
    red:            &red              '#ec7070'
    skyblue:        &skyblue          '#97c3d0'
    darkgreen:      &darkgreen        '#48675A'
    lightbrown:     &lightbrown       '#C6BFA2'
    orange:         &orange           '#EC9F7E'
    lightgreen:     &lightgreen       '#AFD8BC'
    grey:           &grey             '#3D4244'
    pink:           &pink             '#F8A6A6'


  # Page widths in inches for latex documents: ensures easy integration into latex documents
  page_widths:
    full_width:         &full_width         7.5
    half_width:         &half_width         !expr 7.5 / 2
    two_thirds_width:   &two_thirds_width   !expr 2 * 7.5 / 3
    third_width:        &third_width        !expr 7.5 / 3
    quarter_width:      &quarter_width      !expr 7.5 / 4
    fifth_width:        &fifth_width        !expr 7.5 / 5
    eighth_width:       &eighth_width       !expr 7.5 / 8

.matrix_defaults:
  style:
    figure.figsize: [ *third_width, *third_width ]
    axes.grid: False
    axes.spines.top: True
    axes.spines.right: True
    axes.linewidth: 0.5
  vmax: 1
  helpers:
    set_title:
      title: ''
    set_ticks:
      x:
        major: []
      y:
        major: []
    set_labels:
      x: ' '
      y: ' '
    set_limits:
      y: [max, min]
      x: [min, max]

# ======================================================================================================================
# ╔═╗╦  ╔═╗╔╦╗╔═╗
# ╠═╝║  ║ ║ ║ ╚═╗
# ╩  ╩═╝╚═╝ ╩ ╚═╝
# ======================================================================================================================

# Plot the training and Frobenius loss
loss:
  based_on: loss
  figsize: [*half_width, *third_width]

# Plot the accuracy on the true edges
accuracy_on_true_edges: !pspace
  based_on:
    - .creator.universe
    - .marginals
  select:
    predictions: output_data/predictions
    true_values:
      path: true_network/_adjacency_matrix
      transform:
        - .isel: [!dag_prev , {time: -1}]
          kwargs: {drop: true}
    loss:
      path: output_data/Loss
      transform:
        - .sel: [!dag_prev , {kind: Data loss}]
          kwargs: {drop: true}
        - mul: [ !dag_prev , -1 ]
        - np.exp: [ !dag_prev ]
  transform:

    # Define a sweep over the first n edges
    - define: !sweep
        default: 0
        range: [15]
      tag: idx
    - .isel: [!dag_tag predictions, {time: -1}]
      kwargs: {drop: true}
      tag: prediction
    - sub: [!dag_prev , !dag_tag true_values]
    - np.abs: [!dag_prev ]
      tag: l1_accuracy
    - pass: [!dag_tag true_values]

    # Filter by existing edges where predictions are below the unperturbed network value
    - create_mask: [!dag_tag true_values , '>=', !dag_tag prediction]
    - xr.where: [!dag_prev , !dag_tag l1_accuracy, 0]
      tag: errors_on_true_edges

    # Normalise to the unperturbed edge weight values and get the n edges with the highest error
    - create_mask: [!dag_tag true_values , '>', 0]
    - xr.where: [ !dag_prev , !dag_tag true_values, 1]
    - div: [!dag_tag errors_on_true_edges, !dag_prev ]
    - NeuralABM.largest_entry_indices: [!dag_prev , 15]
      kwargs: {symmetric: true}
      tag: indices_and_errors

    # Get calculate the marginals on those edges
    - NeuralABM.sel_matrix_indices: [!dag_tag predictions, !dag_prev ]
    - .squeeze: [!dag_prev ]
      kwargs: {drop: true}
    - xr.Dataset:
      - param1: !dag_prev
        loss: !dag_tag loss
    - NeuralABM.compute_marginals: [!dag_prev ]
      kwargs:
        bins: 1000
        along_dim: edge_idx
    - .sel: [!dag_prev , {edge_idx: !dag_tag idx}]
      kwargs: {drop: true}
      tag: data

    # Format the title for each plot
    - NeuralABM.sel_matrix_indices: [ !dag_tag true_values, !dag_tag indices_and_errors ]
      tag: true_vals
    # Get the unperturbed value to plot as a dashed line
    - getitem: [ !dag_tag true_vals , !dag_tag idx ]
      tag: unperturbed_value

    - NeuralABM.compute_p_values: [ !dag_tag data ]
      kwargs:
        t: !dag_tag unperturbed_value
      tag: p_and_mu
    - getitem: [!dag_prev , 0]
    - np.around: [ !dag_prev , 3 ]
    - str: [ !dag_prev ]
      tag: p_value
    - getitem: [!dag_tag p_and_mu, 1]
      tag: mu
    - getitem: [!dag_tag indices_and_errors, -1 ]
    - getitem: [!dag_prev , !dag_tag idx]
    - np.around: [!dag_prev , 3]
    - str: [!dag_prev ]
      tag: error
    - .coords: [!dag_tag true_vals, 'i']
    - .data: [!dag_prev ]
      tag: i
    - .coords: [!dag_tag true_vals, 'j']
    - .data: [!dag_prev ]
    - zip: [!dag_tag i, !dag_prev ]
    - list: [!dag_prev ]
      tag: edges
    - getitem: [!dag_prev , !dag_tag idx]
    - .format: ["Edge: {} \n $p$-value: {}", !dag_prev , !dag_tag p_value ]
      tag: title
  x: param1
  y: prob
  smooth_kwargs:
    enabled: true
    sigma: 10
  helpers:
    set_labels:
      x: ' '
      y: ' '
    set_title:
      title: !dag_result title
    set_hv_lines:
      vlines:
        - pos: !dag_result unperturbed_value
          color: *red
          linestyle: dotted
        - pos: !dag_result mu
          color: *darkgreen
          linestyle: dotted
  style:
    figure.figsize: [*quarter_width, *quarter_width]

accuracy_on_missing_edges: !pspace
  based_on:
    - .creator.universe
    - .marginals
  select:
    predictions: output_data/predictions
    true_values:
      path: true_network/_adjacency_matrix
      transform:
        - .isel: [!dag_prev , {time: -1}]
          kwargs: {drop: true}
    loss:
      path: output_data/Loss
      transform:
        - .sel: [!dag_prev , {kind: Data loss}]
          kwargs: {drop: true}
        - .isel: [!dag_prev , {time: !slice [40, ~]}]
        - mul: [ !dag_prev , -1 ]
        - np.exp: [ !dag_prev ]
  transform:

    # Define a sweep over the first four edges
    - define: !sweep
        default: 0
        values: [245, 244, 250]
        name: i
      tag: i
    - define: !coupled-sweep
        target_name: i
        values: [250, 246, 251]
        default: 0
        name: j
      tag: j
    - .isel: [!dag_tag predictions, {time: -1}]
      kwargs: {drop: true}
      tag: prediction
    - sub: [!dag_prev , !dag_tag true_values]
    - np.abs: [!dag_prev ]
      tag: l1_accuracy

    # Filter by existing edges where predictions are below the unperturbed network value
    - create_mask: [!dag_tag true_values , '>', 0]
    - xr.where: [!dag_prev , !dag_tag l1_accuracy, 0]
      tag: errors_on_true_edges

    # Normalise to the unperturbed edge weight values
#    - create_mask: [!dag_tag true_values , '!=', 0]
#    - xr.where: [ !dag_prev , !dag_tag true_values, 1]
#    - div: [!dag_tag errors_on_true_edges, !dag_prev ]

    # Get calculate the marginals on those edges
    - .isel: [!dag_tag predictions, {i: !dag_tag i, j: !dag_tag j} ]
    - .squeeze: [!dag_prev ]
      kwargs: {drop: true}
    - xr.Dataset:
      - param1: !dag_prev
        loss: !dag_tag loss
    - NeuralABM.compute_marginals: [!dag_prev ]
      kwargs:
        bins: 1000
      tag: data

    # Format the title for each plot
    - .isel: [ !dag_tag l1_accuracy, { i: !dag_tag i, j: !dag_tag j } ]
      tag: pred_val
    - .isel: [ !dag_tag true_values, {i: !dag_tag i, j: !dag_tag j} ]
      tag: true_vals
    - div: [!dag_tag pred_val, !dag_prev ]
    - .values: [!dag_prev ]
    - np.around: [!dag_prev , 3]
    - str: [!dag_prev ]
      tag: error

    - .format: ["Edge: ({}, {}) \n relative error: {}", !dag_tag i, !dag_tag j, !dag_tag error ]
      tag: title

  x: param1
  y: prob
  smooth_kwargs:
    enabled: true
    sigma: 10
  helpers:
    set_labels:
      x: ' '
      y: ' '
    set_title:
      title: !dag_result title
    set_hv_lines:
      vlines:
        - pos: !dag_result true_vals
          color: *red
          linestyle: dotted
  style:
    figure.figsize: [*quarter_width, *quarter_width]

# Plot the predicted adjacency matrix
true_network:
  based_on:
    - adjacency_matrix
    - .matrix_defaults
  select:
    data:
      path: true_network/_adjacency_matrix

# Plot the predicted adjacency matrix
predicted_network:
  based_on:
    - adjacency_matrix
    - .matrix_defaults
  select:
    data:
      path: output_data/predictions
      transform:
        - .isel: [!dag_prev , {time: -1}]
  cbar_kwargs:
    label: Predicted edge weight $\hat{a}_{ij}$

# Plot the prediction error on the matrices
error:
  based_on:
    - accuracy
    - .matrix_defaults
  norm:
    name: LogNorm
  vmin: 1e-7
  vmax: ~
  cbar_kwargs:
    label: Prediction error $\vert \hat{a}_{ij} - a_{ij} \vert$
  cmap:
    from_values:
      0: white
      0.5: *yellow
      1: *red

phases:
  based_on:
    - .creator.universe
    - .plot.facet_grid.line
  select:
    true_data:
      path: training_data/phases
      transform:
        - .sel: &sel [!dag_prev , {vertex_idx: [241, 169, 480, 120, 310, 0]}]
          kwargs:
            method: nearest
    prediction:
      path: output_data/predicted phases
      transform:
        - .sel: *sel
          kwargs:
            method: nearest
  transform:
    - pd.Index: [ [ 'True', 'Predicted' ] ]
      kwargs: {name: 'kind'}
    - xr.concat: [[!dag_tag true_data, !dag_tag prediction], !dag_prev ]
      tag: concatenated_data
    - .isel: [!dag_prev , {time: 0}]
    - div: [!dag_tag concatenated_data, !dag_prev ]
      tag: data
  x: time
  hue: kind
  col: vertex_idx
  col_wrap: 3
  sharey: False
  add_legend: False
  figsize: [*full_width, *half_width]
  helpers:
    setup_figure:
      nrows: 2
      ncols: 4
    set_legend:
      use_legend: False
    call:
      functions:
        - function: [ matplotlib.pyplot, axvspan ]
          color: *pink
          alpha: 0.2
          zorder: -1
          xmin: 100
          xmax: 400
          lw: 0
    axis_specific:
      11:
        axis: [0, 0]
        set_title:
          title: 'Doncaster'
        set_labels:
          y: $\varphi_i(t)/\varphi_i(t=0)$
      12:
        axis: [1, 0]
        set_title:
          title: 'Bangor'

      13:
        axis: [2, 0]
        set_title:
          title: 'Aberdeen'
      14:
        axis: [0, 1]
        set_title:
          title: 'Cirencester'
        set_labels:
          y: $\varphi_i(t)/\varphi_i(t=0)$
          x: $t$ [s]
      21:
        axis: [1, 1]
        set_title:
          title: 'Middlesbrough'
        set_labels:
          x: $t$ [s]
      22:
        axis: [2, 1]
        set_title:
          title: 'Truro'
        set_labels:
          x: $t$ [s]
        set_ticks:
          x:
            major:
              locs: [ 0, 2000, 4000 ]
              labels: [0, 20, 40]


rolling_losses:
  based_on:
    - .creator.universe
    - .plot.facet_grid.line
  select:
    losses:
      path: output_data/Loss
      transform:
        - .sel: [!dag_prev , {kind: Data loss}]
          kwargs: {drop: true}
  dag_options:
    meta_operations:
      rolling_mean:
        - .rolling: [!arg 0 ]
          kwargs:
            time: !arg 1
        - .mean: [!dag_prev ]
        - np.abs: [!dag_prev ]
  transform:
    - rolling_mean: [!dag_tag losses, 20]
      tag: loss
    - .diff: [!dag_tag loss ]
      kwargs:
        dim: time
        label: lower
    - np.abs: [!dag_prev ]
    - rolling_mean: [!dag_prev , 20]
      tag: first
    - .diff: [!dag_tag loss ]
      kwargs:
        dim: time
        label: lower
    - .diff: [!dag_prev  ]
      kwargs:
        dim: time
        label: lower
    - np.abs: [!dag_prev ]
    - rolling_mean: [!dag_prev , 20]
      tag: second
#    - rolling_mean: [!dag_tag loss]
#      tag: rolling_mean
#    - rolling_mean: [!dag_tag first]
#      tag: first_rolling
#    - rolling_mean: [!dag_tag second]
#      tag: second_rolling
    - pd.Index: [ [ '$\langle J \rangle$', '$\partial_t \langle J\rangle$', '$\partial_{tt} \langle J \rangle$' ] ]
      kwargs: {name: 'order'}
    - xr.concat: [[!dag_tag loss, !dag_tag first, !dag_tag second], !dag_prev ]
      tag: data
  hue: order
  helpers:
    set_scales:
      y: log

perturbation:
  based_on:
    - .creator.universe
    - .plot.facet_grid.line
  select:
    responses:
      path: training_data/phases
      transform:
        - .sel: [!dag_prev , {vertex_idx: [257, 253, 112, 621]}]
        - .sel: [!dag_prev , {time: !slice [12000, ~]}]
  transform:
    - define: 0.9995
      tag: label_loc_sf
    - .sel: [!dag_tag responses, {time: 15000}]
    - div: [!dag_tag responses, !dag_prev ]
      tag: data
    - .isel: [!dag_prev , {vertex_idx: 0, time: -1}]
    - mul: [!dag_prev , !dag_tag label_loc_sf]
      tag: A
    - .isel: [!dag_tag data , {vertex_idx: 1, time: -1}]
    - mul: [!dag_prev , !dag_tag label_loc_sf]
      tag: B
    - .isel: [!dag_tag data , {vertex_idx: 2, time: -1}]
    - mul: [!dag_prev , !dag_tag label_loc_sf]
      tag: C
    - .isel: [!dag_tag data , {vertex_idx: 3, time: -1}]
    - mul: [ !dag_prev , !dag_tag label_loc_sf]
      tag: D
  x: time
  hue: vertex_idx
  helpers:
    set_legend:
      use_legend: False
    set_title:
      title: ~
    set_labels:
      x: Time since line failure [s]
      y: $\varphi_i(t)/\varphi_i(t=0)$
    set_hv_lines:
      vlines:
        - pos: 15000
          color: *red
          linestyle: dotted
    set_ticks:
      x:
        major:
          locs: [12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000]
          labels: [-30, -20, -10, 0, 10, 20, 30, 40, 50]
    set_texts:
      texts:
        - x: &label_loc 20100
          y: !dag_result A
          s: 'A'
          color: 'black'
        - x: *label_loc
          y: !dag_result B
          s: 'B'
          color: *darkgreen
        - x: *label_loc
          y: !dag_result C
          s: 'C'
          color: *pink
        - x: *label_loc
          y: !dag_result D
          s: 'D'
          color: *lightgreen
    call:
      functions:
        - function: [matplotlib.pyplot, axvspan]
          color: *pink
          alpha: 0.2
          zorder: -1
          xmin: 15100
          xmax: 15500
          lw: 0
  style:
    figure.figsize: [*half_width, *quarter_width]
    axes.prop_cycle: !format
      fstr: "cycler('color', ['black',
                              '{colors[darkgreen]:}',
                              '{colors[pink]:}',
                              '{colors[lightgreen]:}',
                              ])"
      colors: *colors

#loss_comp:
#  based_on:
#    - .creator.multiverse
#    - .plot.facet_grid.line
#  select_and_combine:
#    fields:
#      loss:
#        path: output_data/Training loss
#      prediction_error:
#        path: output_data/Prediction error
#  transform:
#    - pd.Index: [ [ 'Training', 'Prediction' ] ]
#      kwargs: {name: 'kind'}
#    - xr.concat: [[!dag_tag loss, !dag_tag prediction_error], !dag_prev ]
#      tag: data
#  x: time
#  col: kind
#  sharey: false
#  helpers:
#    set_scales:
#      y: log